;drukuje macierz
(defun printm(matrix)
	(if (null matrix)
		(format t "~%null")
	)
	(dolist (row matrix)
		(print row)
	)
	(format t "~%") ;newline
)

;zamienia wiersze w macierzy
(defun swap_rows(g i j)
	(let ((tmp (nth i g))
		  (tmp_g  g)
		 )
		(setf (nth i tmp_g) (nth j tmp_g))
		(setf (nth j tmp_g) tmp)
		(block nil (return tmp_g))
	)
)

(defmacro macro_swap_rows(g i j)
	`(let ((tmp (nth ,i ,g))
		  (tmp_g  ,g)
		 )
		(setf (nth ,i tmp_g) (nth ,j tmp_g))
		(setf (nth ,j tmp_g) tmp)
	(block nil (return tmp_g))
	)
)

(print "---------------------Zamiana wierszy macierzy---------------------")
(print "Macierz A:")
(setq A '(((2 2) (1 1))((23 23) (21 21))((23 321) (23 22))))
(setq A2 '(((2 2) (1 1))((23 23) (21 21))((23 321) (23 22))))
(printm A)
(print "FUNKCJA: Zamiana wierszy 0 z 2")
(printm (swap_rows A 0 2))

(print "MAKROEXPAND-1: Zamiana wierszy 0 z 2")
(print (macroexpand-1 '(macro_swap_rows A2 0 2)))
(print "MAKRO: Zamiana wierszy 0 z 2")
(printm (macro_swap_rows A2 0 2))
