;drukuje macierz
(defun printm(matrix)
	(if (null matrix)
		(format t "~%null")
	)
	(dolist (row matrix)
		(print row)
	)
	(format t "~%") ;newline
)

;zwraca minor M_ij dla macierzy kwadratowej A; i - wiersz, j - kolumna
(defun getMinor(A i_removed j_removed)
	(cond
		;if
		(
			(null A)
			nil
		)
		;else if
		(
			(atom A)
			(format t "~%Error: Matix of size one has no minor")
			nil
		)
		;else if
		(
			(= (list-length A) 1)
			(format t "~%Error: Matix of size one has no minor")
			nil
		)
		;else
		(
			t ;always true
			(let ((minor ()))
			(loop for i from (-(list-length A) 1) downto 0 do
				(let ((newRow ()))
					(cond 
						(
							(not (= i i_removed))
							(setf newRow (nth i A))
							;(format t "~%to remove:")
							;(printm (list (nth j_removed newRow)))
							(setf newRow (remove (nth j_removed newRow) newRow :count 1))
							(setf newRow (list newRow))
						)
					)
					;(format t "~%newRow:")
					;(printm newRow)
					(setf minor (append newRow minor))
				)
			)
			minor
			)
		)
	)
)

;³¹czy listy po odpowiadaj¹cych elementach
;(a b c) + (d e f) -> ((a d)(b e)(c f))
(defun mergeLists(q1 q2)	
	(if (not (listp q1))		
  	    (setf q1 (list q1))
	)	
	(if (not (listp q2))
	    (setf q2 (list q2))
	)	
	(if (not (listp (first q1)))	
	    (setf (first q1) (list (first q1)))
	)	
	(if (not (listp (first q2)))	
	    (setf (first q2) (list (first q2)))
	)	
	(if (not (and (null (first q1)) (null (first q2))))
		(cons (append (first q1) (first q2)) (mergeLists (rest q1) (rest q2)))
	)
)

;transponuje macierz
(defun transpose(matrix)
	(let ((result nil))
		(dolist (row matrix result)
			(setq result (mergeLists result (copy-list row)))
		)
	)
)

;mno¿y macierz przez skalar
(defun multiplyScalarMatrix(c matrix)
(cond
	((or (null c) (null matrix)) nil)
	((and (numberp c) (numberp matrix)) (* c matrix))
	(t 
		(let ((result nil))
		(loop for i from (- (list-length matrix) 1) downto 0 do
					(setq matrix_elem (nth i matrix))
					(setq result (append (list (multiplyScalarMatrix c matrix_elem)) result))
				)
		result
		)
	)
)
)

;zwraca element A(i,j); A - macierz, i - wiersz, j - kolumna
(defun getMatrixElement(A i j)
	(nth j (nth i A))
)

;zwraca wyznacznik macierzy A
(defun getDet(A)
	;(printm A)
	(cond
		;if matrix size is 1x1
		(
			(= (list-length A) 1)
			(first (first A))
		)
		;else
		(
			t
			(let ((result 0))
				(loop for i from (-(list-length A) 1) downto 0 do
					(setf result (+ result (* (expt -1 (+ i 0)) (getMatrixElement A i 0) (getDet (getMinor A i 0)))))	
				)
				;(print 'resultSoFar)
				;(print result)
				result
			)
		)
	)
)

;zwraca dope³nie algebraiczne a(i,j); A - macierz, i - wiersz, j - kolumna
(defun getAlgebmatrixCompl(A i j)
	(* (expt -1 (+ i j)) (getDet (getMinor A i j)))
)

;zwraca macierz do³¹czon¹ macierzy A
(defun getAdjugateMatrix(A)
	(let ((result ()))
		(loop for i from (-(list-length A) 1) downto 0 do	
			(let ((newRow ()))
				(loop for j from (-(list-length (nth i A)) 1) downto 0 do
					(setf newRow (append (list (getAlgebmatrixCompl A i j)) newRow))	
				)
				(setf result (append (list newRow) result))
			)
		)
		(transpose result)
	)
)

;zwraca macierz odwrotn¹
(defun getInv(A)
	(cond
		(
			(= 0 (getDet A))
			(format t "~%Error: Matix det is 0. No inv matrix.")
			nil
		)
		(
			t
			(multiplyScalarMatrix(/ 1 (getDet A)) (getAdjugateMatrix A)) 
		)
	)
)

;testy
(setq  a1 '((1 2 3)(4 5 6)(11 12 13)))
(setq  b1 '((1 2 3)(4 5 6)(7 9 8)))
(setq  c1 '((1 11 6 12)(9 2 15 8)(16 5 3 7)(4 14 10 13)))

(format t "~%A1:")
(printm a1)
(format t "~%B1:")
(printm b1)

;(format t "~%minor(a1, 2, 2):")
;(printm (getMinor a1 2 2))

;(format t "~%minor(a1, 0, 1):")
;(printm (getMinor a1 0 1))

;(format t "~%minor(a1, 1, 0):")
;(printm (getMinor a1 1 0))

(format t "~%det(a1): should be 0")
(print (getDet a1))

(format t "~%det(b1): should be 9")
(print (getDet b1))

(format t "~%det(c1): should be -7940")
(print (getDet c1))

(format t "~%getAlgebmatrixCompl(a1 0 0): should be -7")
(print (getAlgebmatrixCompl a1 0 0))

(format t "~%getAlgebmatrixCompl(a1 1 1): should be -20")
(print (getAlgebmatrixCompl a1 1 1))

(format t "~%getAlgebmatrixCompl(b1 0 1): should be 10")
(print (getAlgebmatrixCompl b1 0 1))

(format t "~%getAlgebmatrixCompl(b1 1 0): should be 11")
(print (getAlgebmatrixCompl b1 1 0))

(format t "~%getAdjugateMatrix(a1):")
(printm (getAdjugateMatrix a1))

(format t "~%getAdjugateMatrix(b1):")
(printm (getAdjugateMatrix b1))

(format t "~%getInv(a1): should not exist")
(printm (getInv a1))

(format t "~%getInv(b1): should be (-14/9 11/9 -1/3) ...")
(printm (getInv b1))